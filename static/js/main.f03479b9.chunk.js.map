{"version":3,"sources":["components/Input.js","components/Button.js","components/ClearButton.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","className","this","props","children","Component","Button","isOperator","val","isNaN","onClick","handleClick","ClearButton","handleClear","Calculator","addToInput","setState","input","divide","prevNumber","operator","multiply","plus","substract","addZeroDigit","addDecimalPoint","indexOf","clearInput","evaluate","currNumber","parseFloat","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAceA,G,8NAVXC,MAAQ,G,uDAEJ,OACI,yBAAKC,UAAU,SACVC,KAAKC,MAAMC,c,GALRC,cCgBLC,G,kNAdXC,WAAa,SAAAC,GACT,OAAQC,MAAMD,IAAgB,MAARA,GAAuB,MAARA,G,uDAG/B,IAAD,OACL,OACI,yBAAKP,UAAS,iBAAYC,KAAKK,WAAYL,KAAKC,MAAMC,UAAY,GAAK,YACvEM,QAAS,kBAAM,EAAKP,MAAMQ,YAAY,EAAKR,MAAMC,YAC3CF,KAAKC,MAAMC,e,GAVRC,cCUNO,G,6KATD,IAAD,OACL,OACI,yBAAKX,UAAU,YAAYS,QAAS,kBAAM,EAAKP,MAAMU,gBAChDX,KAAKC,MAAMC,e,GAJFC,cCwJXS,E,kDApJX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IAUVY,WAAa,SAAAP,GACT,EAAKQ,SAAS,CACVC,MAAO,EAAKjB,MAAMiB,MAAQT,KAbhB,EAiBlBU,OAAS,WACL,EAAKF,SAAS,CACVG,WAAY,EAAKnB,MAAMiB,MACvBA,MAAO,GACPG,SAAU,YArBA,EAyBlBC,SAAW,WACP,EAAKL,SAAS,CACVG,WAAY,EAAKnB,MAAMiB,MACvBA,MAAO,GACPG,SAAU,cA7BA,EAiClBE,KAAO,WACH,EAAKN,SAAS,CACVG,WAAY,EAAKnB,MAAMiB,MACvBA,MAAO,GACPG,SAAU,UArCA,EAyClBG,UAAY,WACR,EAAKP,SAAS,CACVG,WAAY,EAAKnB,MAAMiB,MACvBA,MAAO,GACPG,SAAU,eA7CA,EAiDlBI,aAAe,SAAAhB,GAEa,KAArB,EAAKR,MAAMiB,OACV,EAAKD,SAAS,CACVC,MAAO,EAAKjB,MAAMiB,MAAQT,KArDpB,EA0DlBiB,gBAAkB,SAAAjB,IAEwB,IAAnC,EAAKR,MAAMiB,MAAMS,QAAQ,MACxB,EAAKV,SAAS,CACVC,MAAO,EAAKjB,MAAMiB,MAAQT,KA9DpB,EAmElBmB,WAAa,WACT,EAAKX,SAAS,CACVC,MAAO,MArEG,EAyElBW,SAAW,WAGP,OAFA,EAAK5B,MAAM6B,WAAa,EAAK7B,MAAMiB,MAE5B,EAAKjB,MAAMoB,UACd,IAAK,OACD,EAAKJ,SAAS,CACVC,MAAOa,WAAW,EAAK9B,MAAMmB,YAAcW,WAAW,EAAK9B,MAAM6B,cAErE,MAEJ,IAAK,YACD,EAAKb,SAAS,CACVC,MAAOa,WAAW,EAAK9B,MAAMmB,YAAcW,WAAW,EAAK9B,MAAM6B,cAErE,MAEJ,IAAK,WACD,EAAKb,SAAS,CACVC,MAAOa,WAAW,EAAK9B,MAAMmB,YAAcW,WAAW,EAAK9B,MAAM6B,cAErE,MAEJ,IAAK,SACD,EAAKb,SAAS,CACVC,MAAOa,WAAW,EAAK9B,MAAMmB,YAAcW,WAAW,EAAK9B,MAAM6B,gBA9F7E,EAAK7B,MAAQ,CACTiB,MAAO,GACPE,WAAY,GACZU,WAAY,GACZT,SAAU,IAPA,E,qDAyGd,OACA,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,KAAQC,KAAKF,MAAMiB,QAGrB,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAQU,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKgB,QAA1B,MAGF,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CAAQU,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKmB,UAA1B,MAGF,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CAAQU,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKa,YAA1B,KACA,kBAAC,EAAD,CAAQJ,YAAaT,KAAKoB,MAA1B,MAGF,yBAAKrB,UAAU,OACb,kBAAC,EAAD,CAAQU,YAAaT,KAAKuB,iBAA1B,KACA,kBAAC,EAAD,CAAQd,YAAaT,KAAKsB,cAA1B,KACA,kBAAC,EAAD,CAAQb,YAAaT,KAAK0B,UAA1B,KACA,kBAAC,EAAD,CAAQjB,YAAaT,KAAKqB,WAA1B,MAGF,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAaY,YAAaX,KAAKyB,YAA/B,e,GA7IatB,aCWV0B,E,uKAXX,OACE,yBAAK9B,UAAU,OACb,sDACA,8BACE,kBAAC,EAAD,Y,GANQ+B,IAAM3B,WCQJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f03479b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Input.css';\r\n\r\nclass Input extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (  \r\n            <div className=\"input\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Input;","import React, { Component } from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n\r\n    isOperator = val => {\r\n        return !isNaN(val) || val === \".\" || val === \"=\";\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className={`button ${this.isOperator (this.props.children) ? \"\" : \"operator\"}`}\r\n            onClick={() => this.props.handleClick(this.props.children)}>\r\n                 {this.props.children}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Button;","import React, { Component } from 'react';\r\nimport './ClearButton.css';\r\n\r\nclass ClearButton extends Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"clear-btn\" onClick={() => this.props.handleClear()}>\r\n                {this.props.children}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ClearButton;","import React, { Component } from 'react';\r\nimport './Calculator.css';\r\nimport Input from './Input';\r\nimport Button from './Button';\r\nimport ClearButton from './ClearButton';\r\n\r\nclass Calculator extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: \"\",\r\n            prevNumber: \"\",\r\n            currNumber: \"\",\r\n            operator: \"\"\r\n        }\r\n    }\r\n\r\n    addToInput = val => {\r\n        this.setState({\r\n            input: this.state.input + val\r\n        });\r\n    }\r\n\r\n    divide = () => {\r\n        this.setState({\r\n            prevNumber: this.state.input,\r\n            input: \"\",\r\n            operator: \"divide\"\r\n        });\r\n    }\r\n\r\n    multiply = () => {\r\n        this.setState({\r\n            prevNumber: this.state.input,\r\n            input: \"\",\r\n            operator: \"multiply\"\r\n        });\r\n    }\r\n\r\n    plus = () => {\r\n        this.setState({\r\n            prevNumber: this.state.input,\r\n            input: \"\",\r\n            operator: \"plus\"\r\n        });\r\n    }\r\n\r\n    substract = () => {\r\n        this.setState({\r\n            prevNumber: this.state.input,\r\n            input: \"\",\r\n            operator: \"substract\"\r\n        });\r\n    }\r\n\r\n    addZeroDigit = val => {\r\n        //if input not empty, add zero\r\n        if(this.state.input !== \"\") {\r\n            this.setState({\r\n                input: this.state.input + val\r\n            });\r\n        }\r\n    }\r\n\r\n    addDecimalPoint = val => {\r\n        //add decimal if there's no current decimal being presented\r\n        if(this.state.input.indexOf(\".\") === -1) {\r\n            this.setState({\r\n                input: this.state.input + val\r\n            });\r\n        }\r\n    }\r\n\r\n    clearInput = () => {\r\n        this.setState({\r\n            input: \"\"\r\n        });\r\n    }\r\n\r\n    evaluate = () => {\r\n        this.state.currNumber = this.state.input;\r\n\r\n        switch(this.state.operator){\r\n            case \"plus\":\r\n                this.setState({\r\n                    input: parseFloat(this.state.prevNumber) + parseFloat(this.state.currNumber)\r\n                });\r\n                break;\r\n\r\n            case \"substract\":\r\n                this.setState({\r\n                    input: parseFloat(this.state.prevNumber) - parseFloat(this.state.currNumber)\r\n                });\r\n                break;\r\n\r\n            case \"multiply\":\r\n                this.setState({\r\n                    input: parseFloat(this.state.prevNumber) * parseFloat(this.state.currNumber)\r\n                });\r\n                break;\r\n            \r\n            case \"divide\":\r\n                this.setState({\r\n                    input: parseFloat(this.state.prevNumber) / parseFloat(this.state.currNumber)\r\n                });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n        render() { \r\n        return ( \r\n        <div className=\"wrapper\">\r\n          <div className=\"row\">\r\n            <Input>{this.state.input}</Input>\r\n          </div>\r\n        \r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>7</Button>\r\n            <Button handleClick={this.addToInput}>8</Button>\r\n            <Button handleClick={this.addToInput}>9</Button>\r\n            <Button handleClick={this.divide}>/</Button>\r\n          </div>\r\n            \r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>4</Button>\r\n            <Button handleClick={this.addToInput}>5</Button>\r\n            <Button handleClick={this.addToInput}>6</Button>\r\n            <Button handleClick={this.multiply}>*</Button>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>1</Button>\r\n            <Button handleClick={this.addToInput}>2</Button>\r\n            <Button handleClick={this.addToInput}>3</Button>\r\n            <Button handleClick={this.plus}>+</Button>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addDecimalPoint}>.</Button>\r\n            <Button handleClick={this.addZeroDigit}>0</Button>\r\n            <Button handleClick={this.evaluate}>=</Button>\r\n            <Button handleClick={this.substract}>-</Button>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\r\n          </div>\r\n\r\n        </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <h2>Calculator Application</h2>\n        <body>\n          <Calculator />\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}